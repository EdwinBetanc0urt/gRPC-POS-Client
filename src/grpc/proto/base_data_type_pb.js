/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.data.ChangeLog', null, global);
goog.exportSymbol('proto.data.Condition', null, global);
goog.exportSymbol('proto.data.Condition.Operator', null, global);
goog.exportSymbol('proto.data.Criteria', null, global);
goog.exportSymbol('proto.data.Dashboard', null, global);
goog.exportSymbol('proto.data.Decimal', null, global);
goog.exportSymbol('proto.data.DocumentAction', null, global);
goog.exportSymbol('proto.data.DocumentStatus', null, global);
goog.exportSymbol('proto.data.DrillTable', null, global);
goog.exportSymbol('proto.data.Empty', null, global);
goog.exportSymbol('proto.data.Entity', null, global);
goog.exportSymbol('proto.data.KeyValue', null, global);
goog.exportSymbol('proto.data.KeyValueSelection', null, global);
goog.exportSymbol('proto.data.OrderByProperty', null, global);
goog.exportSymbol('proto.data.OrderByProperty.OrderType', null, global);
goog.exportSymbol('proto.data.PrintFormat', null, global);
goog.exportSymbol('proto.data.ProcessInfoLog', null, global);
goog.exportSymbol('proto.data.ProcessLog', null, global);
goog.exportSymbol('proto.data.RecordLog', null, global);
goog.exportSymbol('proto.data.RecordLog.EventType', null, global);
goog.exportSymbol('proto.data.RecordReferenceInfo', null, global);
goog.exportSymbol('proto.data.ReportOutput', null, global);
goog.exportSymbol('proto.data.ReportView', null, global);
goog.exportSymbol('proto.data.Translation', null, global);
goog.exportSymbol('proto.data.Value', null, global);
goog.exportSymbol('proto.data.Value.ValueType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Empty.displayName = 'proto.data.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.KeyValueSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.KeyValueSelection.repeatedFields_, null);
};
goog.inherits(proto.data.KeyValueSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.KeyValueSelection.displayName = 'proto.data.KeyValueSelection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.KeyValue.displayName = 'proto.data.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Value.displayName = 'proto.data.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Decimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Decimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Decimal.displayName = 'proto.data.Decimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Criteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.Criteria.repeatedFields_, null);
};
goog.inherits(proto.data.Criteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Criteria.displayName = 'proto.data.Criteria';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.OrderByProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.OrderByProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.OrderByProperty.displayName = 'proto.data.OrderByProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.Condition.repeatedFields_, null);
};
goog.inherits(proto.data.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Condition.displayName = 'proto.data.Condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.RecordReferenceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.RecordReferenceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.RecordReferenceInfo.displayName = 'proto.data.RecordReferenceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.DocumentStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.DocumentStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.DocumentStatus.displayName = 'proto.data.DocumentStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.DocumentAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.DocumentAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.DocumentAction.displayName = 'proto.data.DocumentAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Entity.displayName = 'proto.data.Entity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ProcessLog.repeatedFields_, null);
};
goog.inherits(proto.data.ProcessLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessLog.displayName = 'proto.data.ProcessLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessInfoLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ProcessInfoLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessInfoLog.displayName = 'proto.data.ProcessInfoLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Translation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Translation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Translation.displayName = 'proto.data.Translation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Dashboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Dashboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Dashboard.displayName = 'proto.data.Dashboard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.PrintFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.PrintFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.PrintFormat.displayName = 'proto.data.PrintFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.RecordLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.RecordLog.repeatedFields_, null);
};
goog.inherits(proto.data.RecordLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.RecordLog.displayName = 'proto.data.RecordLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ChangeLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ChangeLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ChangeLog.displayName = 'proto.data.ChangeLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ReportView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ReportView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ReportView.displayName = 'proto.data.ReportView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.DrillTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.DrillTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.DrillTable.displayName = 'proto.data.DrillTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ReportOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ReportOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ReportOutput.displayName = 'proto.data.ReportOutput';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Empty}
 */
proto.data.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Empty;
  return proto.data.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Empty}
 */
proto.data.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.KeyValueSelection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.KeyValueSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.data.KeyValueSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.KeyValueSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.KeyValueSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.data.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.KeyValueSelection}
 */
proto.data.KeyValueSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.KeyValueSelection;
  return proto.data.KeyValueSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.KeyValueSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.KeyValueSelection}
 */
proto.data.KeyValueSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelectionid(value);
      break;
    case 2:
      var value = new proto.data.KeyValue;
      reader.readMessage(value,proto.data.KeyValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.KeyValueSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.KeyValueSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.KeyValueSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.KeyValueSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.data.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 selectionId = 1;
 * @return {number}
 */
proto.data.KeyValueSelection.prototype.getSelectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.KeyValueSelection.prototype.setSelectionid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated KeyValue values = 2;
 * @return {!Array<!proto.data.KeyValue>}
 */
proto.data.KeyValueSelection.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.data.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.KeyValue, 2));
};


/** @param {!Array<!proto.data.KeyValue>} value */
proto.data.KeyValueSelection.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.data.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.KeyValue}
 */
proto.data.KeyValueSelection.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.data.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.KeyValueSelection.prototype.clearValuesList = function() {
  this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.data.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.data.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.KeyValue}
 */
proto.data.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.KeyValue;
  return proto.data.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.KeyValue}
 */
proto.data.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.data.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.KeyValue.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {?proto.data.Value}
 */
proto.data.KeyValue.prototype.getValue = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 2));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.KeyValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.KeyValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.KeyValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    intvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    longvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    booleanvalue: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    decimalvalue: (f = msg.getDecimalvalue()) && proto.data.Decimal.toObject(includeInstance, f),
    valuetype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Value}
 */
proto.data.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Value;
  return proto.data.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Value}
 */
proto.data.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongvalue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanvalue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 5:
      var value = new proto.data.Decimal;
      reader.readMessage(value,proto.data.Decimal.deserializeBinaryFromReader);
      msg.setDecimalvalue(value);
      break;
    case 6:
      var value = /** @type {!proto.data.Value.ValueType} */ (reader.readEnum());
      msg.setValuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntvalue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLongvalue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBooleanvalue();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDecimalvalue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.data.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getValuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.data.Value.ValueType = {
  UNKNOWN: 0,
  INTEGER: 1,
  DECIMAL: 2,
  BOOLEAN: 3,
  STRING: 4,
  DATE: 5
};

/**
 * optional int32 intValue = 1;
 * @return {number}
 */
proto.data.Value.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.Value.prototype.setIntvalue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 longValue = 2;
 * @return {number}
 */
proto.data.Value.prototype.getLongvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Value.prototype.setLongvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool booleanValue = 3;
 * @return {boolean}
 */
proto.data.Value.prototype.getBooleanvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.data.Value.prototype.setBooleanvalue = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string stringValue = 4;
 * @return {string}
 */
proto.data.Value.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Value.prototype.setStringvalue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Decimal decimalValue = 5;
 * @return {?proto.data.Decimal}
 */
proto.data.Value.prototype.getDecimalvalue = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto.data.Decimal, 5));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.Value.prototype.setDecimalvalue = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Value.prototype.clearDecimalvalue = function() {
  this.setDecimalvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Value.prototype.hasDecimalvalue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ValueType valueType = 6;
 * @return {!proto.data.Value.ValueType}
 */
proto.data.Value.prototype.getValuetype = function() {
  return /** @type {!proto.data.Value.ValueType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.data.Value.ValueType} value */
proto.data.Value.prototype.setValuetype = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Decimal.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Decimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Decimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Decimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    decimalvalue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scale: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Decimal}
 */
proto.data.Decimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Decimal;
  return proto.data.Decimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Decimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Decimal}
 */
proto.data.Decimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecimalvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Decimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Decimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Decimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Decimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecimalvalue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScale();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string decimalValue = 1;
 * @return {string}
 */
proto.data.Decimal.prototype.getDecimalvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Decimal.prototype.setDecimalvalue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 scale = 2;
 * @return {number}
 */
proto.data.Decimal.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Decimal.prototype.setScale = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.Criteria.repeatedFields_ = [6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Criteria.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Criteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Criteria} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Criteria.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    whereclause: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderbyclause: jspb.Message.getFieldWithDefault(msg, 4, ""),
    referenceuuid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.data.Condition.toObject, includeInstance),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.data.Value.toObject, includeInstance),
    orderbycolumnList: jspb.Message.toObjectList(msg.getOrderbycolumnList(),
    proto.data.OrderByProperty.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Criteria}
 */
proto.data.Criteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Criteria;
  return proto.data.Criteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Criteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Criteria}
 */
proto.data.Criteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhereclause(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderbyclause(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceuuid(value);
      break;
    case 6:
      var value = new proto.data.Condition;
      reader.readMessage(value,proto.data.Condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    case 7:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 8:
      var value = new proto.data.OrderByProperty;
      reader.readMessage(value,proto.data.OrderByProperty.deserializeBinaryFromReader);
      msg.addOrderbycolumn(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Criteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Criteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Criteria} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Criteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWhereclause();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderbyclause();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReferenceuuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.data.Condition.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getOrderbycolumnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.data.OrderByProperty.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.data.Criteria.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.data.Criteria.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string whereClause = 3;
 * @return {string}
 */
proto.data.Criteria.prototype.getWhereclause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setWhereclause = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string orderByClause = 4;
 * @return {string}
 */
proto.data.Criteria.prototype.getOrderbyclause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setOrderbyclause = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string referenceUuid = 5;
 * @return {string}
 */
proto.data.Criteria.prototype.getReferenceuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setReferenceuuid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Condition conditions = 6;
 * @return {!Array<!proto.data.Condition>}
 */
proto.data.Criteria.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.data.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Condition, 6));
};


/** @param {!Array<!proto.data.Condition>} value */
proto.data.Criteria.prototype.setConditionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.data.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Condition}
 */
proto.data.Criteria.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.data.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Criteria.prototype.clearConditionsList = function() {
  this.setConditionsList([]);
};


/**
 * repeated Value values = 7;
 * @return {!Array<!proto.data.Value>}
 */
proto.data.Criteria.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.data.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Value, 7));
};


/** @param {!Array<!proto.data.Value>} value */
proto.data.Criteria.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.data.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Value}
 */
proto.data.Criteria.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.data.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Criteria.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * repeated OrderByProperty orderByColumn = 8;
 * @return {!Array<!proto.data.OrderByProperty>}
 */
proto.data.Criteria.prototype.getOrderbycolumnList = function() {
  return /** @type{!Array<!proto.data.OrderByProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.OrderByProperty, 8));
};


/** @param {!Array<!proto.data.OrderByProperty>} value */
proto.data.Criteria.prototype.setOrderbycolumnList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.data.OrderByProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.OrderByProperty}
 */
proto.data.Criteria.prototype.addOrderbycolumn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.data.OrderByProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Criteria.prototype.clearOrderbycolumnList = function() {
  this.setOrderbycolumnList([]);
};


/**
 * optional int64 limit = 9;
 * @return {number}
 */
proto.data.Criteria.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.data.Criteria.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.OrderByProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.data.OrderByProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.OrderByProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.OrderByProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ordertype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.OrderByProperty}
 */
proto.data.OrderByProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.OrderByProperty;
  return proto.data.OrderByProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.OrderByProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.OrderByProperty}
 */
proto.data.OrderByProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 2:
      var value = /** @type {!proto.data.OrderByProperty.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.OrderByProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.OrderByProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.OrderByProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.OrderByProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.data.OrderByProperty.OrderType = {
  ASCENDING: 0,
  DESCENDING: 1
};

/**
 * optional string columnName = 1;
 * @return {string}
 */
proto.data.OrderByProperty.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.OrderByProperty.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OrderType orderType = 2;
 * @return {!proto.data.OrderByProperty.OrderType}
 */
proto.data.OrderByProperty.prototype.getOrdertype = function() {
  return /** @type {!proto.data.OrderByProperty.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.data.OrderByProperty.OrderType} value */
proto.data.OrderByProperty.prototype.setOrdertype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.Condition.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.data.Value.toObject(includeInstance, f),
    valueto: (f = msg.getValueto()) && proto.data.Value.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.data.Value.toObject, includeInstance),
    operator: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Condition}
 */
proto.data.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Condition;
  return proto.data.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Condition}
 */
proto.data.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 2:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValueto(value);
      break;
    case 4:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 5:
      var value = /** @type {!proto.data.Condition.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getValueto();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.data.Condition.Operator = {
  EQUAL: 0,
  NOT_EQUAL: 1,
  LIKE: 2,
  NOT_LIKE: 3,
  GREATER: 4,
  GREATER_EQUAL: 5,
  LESS: 6,
  LESS_EQUAL: 7,
  BETWEEN: 8,
  NOT_NULL: 9,
  NULL: 10,
  IN: 11,
  NOT_IN: 12
};

/**
 * optional string columnName = 1;
 * @return {string}
 */
proto.data.Condition.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Condition.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {?proto.data.Value}
 */
proto.data.Condition.prototype.getValue = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 2));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.Condition.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Condition.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Condition.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Value valueTo = 3;
 * @return {?proto.data.Value}
 */
proto.data.Condition.prototype.getValueto = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 3));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.Condition.prototype.setValueto = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Condition.prototype.clearValueto = function() {
  this.setValueto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Condition.prototype.hasValueto = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Value values = 4;
 * @return {!Array<!proto.data.Value>}
 */
proto.data.Condition.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.data.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Value, 4));
};


/** @param {!Array<!proto.data.Value>} value */
proto.data.Condition.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.data.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Value}
 */
proto.data.Condition.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.data.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Condition.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * optional Operator operator = 5;
 * @return {!proto.data.Condition.Operator}
 */
proto.data.Condition.prototype.getOperator = function() {
  return /** @type {!proto.data.Condition.Operator} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.data.Condition.Operator} value */
proto.data.Condition.prototype.setOperator = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.RecordReferenceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.data.RecordReferenceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.RecordReferenceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.RecordReferenceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    windowuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    displayname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    whereclause: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recordcount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.RecordReferenceInfo}
 */
proto.data.RecordReferenceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.RecordReferenceInfo;
  return proto.data.RecordReferenceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.RecordReferenceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.RecordReferenceInfo}
 */
proto.data.RecordReferenceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindowuuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhereclause(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.RecordReferenceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.RecordReferenceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.RecordReferenceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.RecordReferenceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWindowuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWhereclause();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecordcount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.RecordReferenceInfo.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.RecordReferenceInfo.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string windowUuid = 2;
 * @return {string}
 */
proto.data.RecordReferenceInfo.prototype.getWindowuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.RecordReferenceInfo.prototype.setWindowuuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string displayName = 3;
 * @return {string}
 */
proto.data.RecordReferenceInfo.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.RecordReferenceInfo.prototype.setDisplayname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tableName = 4;
 * @return {string}
 */
proto.data.RecordReferenceInfo.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.RecordReferenceInfo.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string whereClause = 5;
 * @return {string}
 */
proto.data.RecordReferenceInfo.prototype.getWhereclause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.RecordReferenceInfo.prototype.setWhereclause = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 recordCount = 6;
 * @return {number}
 */
proto.data.RecordReferenceInfo.prototype.getRecordcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.data.RecordReferenceInfo.prototype.setRecordcount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.DocumentStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.data.DocumentStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.DocumentStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DocumentStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.DocumentStatus}
 */
proto.data.DocumentStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.DocumentStatus;
  return proto.data.DocumentStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.DocumentStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.DocumentStatus}
 */
proto.data.DocumentStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.DocumentStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.DocumentStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.DocumentStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DocumentStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.data.DocumentStatus.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.DocumentStatus.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.data.DocumentStatus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.DocumentStatus.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.data.DocumentStatus.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.DocumentStatus.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.DocumentAction.prototype.toObject = function(opt_includeInstance) {
  return proto.data.DocumentAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.DocumentAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DocumentAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.DocumentAction}
 */
proto.data.DocumentAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.DocumentAction;
  return proto.data.DocumentAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.DocumentAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.DocumentAction}
 */
proto.data.DocumentAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.DocumentAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.DocumentAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.DocumentAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DocumentAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.data.DocumentAction.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.DocumentAction.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.data.DocumentAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.DocumentAction.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.data.DocumentAction.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.DocumentAction.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Entity}
 */
proto.data.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Entity;
  return proto.data.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Entity}
 */
proto.data.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 4:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.data.Entity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.Entity.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.data.Entity.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.Entity.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableName = 3;
 * @return {string}
 */
proto.data.Entity.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Entity.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, Value> values = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.Entity.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.Entity.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ProcessLog.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessLog.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instanceuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    iserror: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    summary: jspb.Message.getFieldWithDefault(msg, 4, ""),
    resulttablename: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isprocessing: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    lastrun: jspb.Message.getFieldWithDefault(msg, 7, 0),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.data.ProcessInfoLog.toObject, includeInstance),
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : [],
    output: (f = msg.getOutput()) && proto.data.ReportOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessLog}
 */
proto.data.ProcessLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessLog;
  return proto.data.ProcessLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessLog}
 */
proto.data.ProcessLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceuuid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIserror(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setResulttablename(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsprocessing(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastrun(value);
      break;
    case 8:
      var value = new proto.data.ProcessInfoLog;
      reader.readMessage(value,proto.data.ProcessInfoLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 9:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    case 10:
      var value = new proto.data.ReportOutput;
      reader.readMessage(value,proto.data.ReportOutput.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstanceuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIserror();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResulttablename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsprocessing();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getLastrun();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.data.ProcessInfoLog.serializeBinaryToWriter
    );
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.data.ReportOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.ProcessLog.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ProcessLog.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string instanceUuid = 2;
 * @return {string}
 */
proto.data.ProcessLog.prototype.getInstanceuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ProcessLog.prototype.setInstanceuuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isError = 3;
 * @return {boolean}
 */
proto.data.ProcessLog.prototype.getIserror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.data.ProcessLog.prototype.setIserror = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string summary = 4;
 * @return {string}
 */
proto.data.ProcessLog.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ProcessLog.prototype.setSummary = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string resultTableName = 5;
 * @return {string}
 */
proto.data.ProcessLog.prototype.getResulttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ProcessLog.prototype.setResulttablename = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool isProcessing = 6;
 * @return {boolean}
 */
proto.data.ProcessLog.prototype.getIsprocessing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.data.ProcessLog.prototype.setIsprocessing = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 lastRun = 7;
 * @return {number}
 */
proto.data.ProcessLog.prototype.getLastrun = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.data.ProcessLog.prototype.setLastrun = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated ProcessInfoLog logs = 8;
 * @return {!Array<!proto.data.ProcessInfoLog>}
 */
proto.data.ProcessLog.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.data.ProcessInfoLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.ProcessInfoLog, 8));
};


/** @param {!Array<!proto.data.ProcessInfoLog>} value */
proto.data.ProcessLog.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.data.ProcessInfoLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.ProcessInfoLog}
 */
proto.data.ProcessLog.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.data.ProcessInfoLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ProcessLog.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * map<string, Value> parameters = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.ProcessLog.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.ProcessLog.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};


/**
 * optional ReportOutput output = 10;
 * @return {?proto.data.ReportOutput}
 */
proto.data.ProcessLog.prototype.getOutput = function() {
  return /** @type{?proto.data.ReportOutput} */ (
    jspb.Message.getWrapperField(this, proto.data.ReportOutput, 10));
};


/** @param {?proto.data.ReportOutput|undefined} value */
proto.data.ProcessLog.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProcessLog.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProcessLog.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessInfoLog.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessInfoLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessInfoLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessInfoLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    log: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessInfoLog}
 */
proto.data.ProcessInfoLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessInfoLog;
  return proto.data.ProcessInfoLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessInfoLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessInfoLog}
 */
proto.data.ProcessInfoLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecordid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessInfoLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessInfoLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessInfoLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessInfoLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 recordId = 1;
 * @return {number}
 */
proto.data.ProcessInfoLog.prototype.getRecordid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ProcessInfoLog.prototype.setRecordid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string log = 2;
 * @return {string}
 */
proto.data.ProcessInfoLog.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ProcessInfoLog.prototype.setLog = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Translation.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Translation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Translation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Translation.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, ""),
    translationuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Translation}
 */
proto.data.Translation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Translation;
  return proto.data.Translation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Translation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Translation}
 */
proto.data.Translation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranslationuuid(value);
      break;
    case 3:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Translation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Translation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Translation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Translation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTranslationuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.data.Translation.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Translation.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string translationUuid = 2;
 * @return {string}
 */
proto.data.Translation.prototype.getTranslationuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.Translation.prototype.setTranslationuuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, Value> values = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.Translation.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.Translation.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Dashboard.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Dashboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Dashboard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Dashboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    windowuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    browseruuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dashboardname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dashboarddescription: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dashboardhtml: jspb.Message.getFieldWithDefault(msg, 5, ""),
    columnno: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lineno: jspb.Message.getFieldWithDefault(msg, 7, 0),
    iscollapsible: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    isopenbydefault: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    iseventrequired: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    filename: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Dashboard}
 */
proto.data.Dashboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Dashboard;
  return proto.data.Dashboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Dashboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Dashboard}
 */
proto.data.Dashboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindowuuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrowseruuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDashboardname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDashboarddescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDashboardhtml(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumnno(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineno(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscollapsible(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopenbydefault(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIseventrequired(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Dashboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Dashboard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Dashboard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Dashboard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWindowuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBrowseruuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDashboardname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDashboarddescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDashboardhtml();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getColumnno();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getLineno();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getIscollapsible();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIsopenbydefault();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIseventrequired();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string windowUuid = 1;
 * @return {string}
 */
proto.data.Dashboard.prototype.getWindowuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Dashboard.prototype.setWindowuuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string browserUuid = 2;
 * @return {string}
 */
proto.data.Dashboard.prototype.getBrowseruuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.Dashboard.prototype.setBrowseruuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dashboardName = 3;
 * @return {string}
 */
proto.data.Dashboard.prototype.getDashboardname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Dashboard.prototype.setDashboardname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dashboardDescription = 4;
 * @return {string}
 */
proto.data.Dashboard.prototype.getDashboarddescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Dashboard.prototype.setDashboarddescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dashboardHtml = 5;
 * @return {string}
 */
proto.data.Dashboard.prototype.getDashboardhtml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.Dashboard.prototype.setDashboardhtml = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 columnNo = 6;
 * @return {number}
 */
proto.data.Dashboard.prototype.getColumnno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.data.Dashboard.prototype.setColumnno = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 lineNo = 7;
 * @return {number}
 */
proto.data.Dashboard.prototype.getLineno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.data.Dashboard.prototype.setLineno = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool isCollapsible = 8;
 * @return {boolean}
 */
proto.data.Dashboard.prototype.getIscollapsible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.data.Dashboard.prototype.setIscollapsible = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool isOpenByDefault = 9;
 * @return {boolean}
 */
proto.data.Dashboard.prototype.getIsopenbydefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.data.Dashboard.prototype.setIsopenbydefault = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isEventRequired = 10;
 * @return {boolean}
 */
proto.data.Dashboard.prototype.getIseventrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.data.Dashboard.prototype.setIseventrequired = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string fileName = 11;
 * @return {string}
 */
proto.data.Dashboard.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.data.Dashboard.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.PrintFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.data.PrintFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.PrintFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.PrintFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isdefault: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    reportviewuuid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.PrintFormat}
 */
proto.data.PrintFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.PrintFormat;
  return proto.data.PrintFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.PrintFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.PrintFormat}
 */
proto.data.PrintFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdefault(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportviewuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.PrintFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.PrintFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.PrintFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.PrintFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsdefault();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getReportviewuuid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.PrintFormat.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.PrintFormat.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.data.PrintFormat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.PrintFormat.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.data.PrintFormat.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.PrintFormat.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tableName = 4;
 * @return {string}
 */
proto.data.PrintFormat.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.PrintFormat.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool isDefault = 5;
 * @return {boolean}
 */
proto.data.PrintFormat.prototype.getIsdefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.data.PrintFormat.prototype.setIsdefault = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string reportViewUuid = 6;
 * @return {string}
 */
proto.data.PrintFormat.prototype.getReportviewuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.PrintFormat.prototype.setReportviewuuid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.RecordLog.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.RecordLog.prototype.toObject = function(opt_includeInstance) {
  return proto.data.RecordLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.RecordLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.RecordLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    logid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recordid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tablename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sessionuuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    useruuid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    username: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transactionname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    eventtype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    logdate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    changelogsList: jspb.Message.toObjectList(msg.getChangelogsList(),
    proto.data.ChangeLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.RecordLog}
 */
proto.data.RecordLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.RecordLog;
  return proto.data.RecordLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.RecordLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.RecordLog}
 */
proto.data.RecordLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecordid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionuuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUseruuid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionname(value);
      break;
    case 8:
      var value = /** @type {!proto.data.RecordLog.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLogdate(value);
      break;
    case 10:
      var value = new proto.data.ChangeLog;
      reader.readMessage(value,proto.data.ChangeLog.deserializeBinaryFromReader);
      msg.addChangelogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.RecordLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.RecordLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.RecordLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.RecordLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRecordid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessionuuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUseruuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransactionname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getLogdate();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getChangelogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.data.ChangeLog.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.data.RecordLog.EventType = {
  INSERT: 0,
  UPDATE: 1,
  DELETE: 2
};

/**
 * optional int32 logId = 1;
 * @return {number}
 */
proto.data.RecordLog.prototype.getLogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.RecordLog.prototype.setLogid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 recordId = 2;
 * @return {number}
 */
proto.data.RecordLog.prototype.getRecordid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.RecordLog.prototype.setRecordid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string tableName = 3;
 * @return {string}
 */
proto.data.RecordLog.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.RecordLog.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sessionUuid = 4;
 * @return {string}
 */
proto.data.RecordLog.prototype.getSessionuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.RecordLog.prototype.setSessionuuid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string userUuid = 5;
 * @return {string}
 */
proto.data.RecordLog.prototype.getUseruuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.RecordLog.prototype.setUseruuid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string userName = 6;
 * @return {string}
 */
proto.data.RecordLog.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.RecordLog.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string transactionName = 7;
 * @return {string}
 */
proto.data.RecordLog.prototype.getTransactionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.data.RecordLog.prototype.setTransactionname = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional EventType eventType = 8;
 * @return {!proto.data.RecordLog.EventType}
 */
proto.data.RecordLog.prototype.getEventtype = function() {
  return /** @type {!proto.data.RecordLog.EventType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.data.RecordLog.EventType} value */
proto.data.RecordLog.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int64 logDate = 9;
 * @return {number}
 */
proto.data.RecordLog.prototype.getLogdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.data.RecordLog.prototype.setLogdate = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated ChangeLog changeLogs = 10;
 * @return {!Array<!proto.data.ChangeLog>}
 */
proto.data.RecordLog.prototype.getChangelogsList = function() {
  return /** @type{!Array<!proto.data.ChangeLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.ChangeLog, 10));
};


/** @param {!Array<!proto.data.ChangeLog>} value */
proto.data.RecordLog.prototype.setChangelogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.data.ChangeLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.ChangeLog}
 */
proto.data.RecordLog.prototype.addChangelogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.data.ChangeLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.RecordLog.prototype.clearChangelogsList = function() {
  this.setChangelogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ChangeLog.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ChangeLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ChangeLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ChangeLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    displaycolumnname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    oldvalue: jspb.Message.getFieldWithDefault(msg, 10, ""),
    olddisplayvalue: jspb.Message.getFieldWithDefault(msg, 11, ""),
    newvalue: jspb.Message.getFieldWithDefault(msg, 12, ""),
    newdisplayvalue: jspb.Message.getFieldWithDefault(msg, 13, ""),
    description: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ChangeLog}
 */
proto.data.ChangeLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ChangeLog;
  return proto.data.ChangeLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ChangeLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ChangeLog}
 */
proto.data.ChangeLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplaycolumnname(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldvalue(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOlddisplayvalue(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewvalue(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewdisplayvalue(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ChangeLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ChangeLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ChangeLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ChangeLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDisplaycolumnname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOldvalue();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getOlddisplayvalue();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getNewvalue();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getNewdisplayvalue();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string columnName = 4;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string displayColumnName = 5;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getDisplaycolumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setDisplaycolumnname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string oldValue = 10;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getOldvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setOldvalue = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string oldDisplayValue = 11;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getOlddisplayvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setOlddisplayvalue = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string newValue = 12;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getNewvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setNewvalue = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string newDisplayValue = 13;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getNewdisplayvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setNewdisplayvalue = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string description = 14;
 * @return {string}
 */
proto.data.ChangeLog.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.data.ChangeLog.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ReportView.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ReportView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ReportView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ReportView.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ReportView}
 */
proto.data.ReportView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ReportView;
  return proto.data.ReportView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ReportView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ReportView}
 */
proto.data.ReportView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ReportView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ReportView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ReportView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ReportView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.ReportView.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ReportView.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.data.ReportView.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ReportView.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.data.ReportView.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ReportView.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tableName = 4;
 * @return {string}
 */
proto.data.ReportView.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ReportView.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.DrillTable.prototype.toObject = function(opt_includeInstance) {
  return proto.data.DrillTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.DrillTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DrillTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    printname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.DrillTable}
 */
proto.data.DrillTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.DrillTable;
  return proto.data.DrillTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.DrillTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.DrillTable}
 */
proto.data.DrillTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrintname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.DrillTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.DrillTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.DrillTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DrillTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrintname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.data.DrillTable.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.DrillTable.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string printName = 2;
 * @return {string}
 */
proto.data.DrillTable.prototype.getPrintname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.DrillTable.prototype.setPrintname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ReportOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ReportOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ReportOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ReportOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    output: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mimetype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    datacols: jspb.Message.getFieldWithDefault(msg, 7, 0),
    datarows: jspb.Message.getFieldWithDefault(msg, 8, 0),
    headername: jspb.Message.getFieldWithDefault(msg, 9, ""),
    footername: jspb.Message.getFieldWithDefault(msg, 10, ""),
    printformatuuid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    reportviewuuid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 13, ""),
    outputstream: msg.getOutputstream_asB64(),
    reporttype: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ReportOutput}
 */
proto.data.ReportOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ReportOutput;
  return proto.data.ReportOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ReportOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ReportOutput}
 */
proto.data.ReportOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatacols(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatarows(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadername(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFootername(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrintformatuuid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportviewuuid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutputstream(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setReporttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ReportOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ReportOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ReportOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ReportOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDatacols();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getDatarows();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getHeadername();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFootername();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPrintformatuuid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getReportviewuuid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getOutputstream_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getReporttype();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fileName = 4;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string output = 5;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setOutput = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mimeType = 6;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setMimetype = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 dataCols = 7;
 * @return {number}
 */
proto.data.ReportOutput.prototype.getDatacols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.data.ReportOutput.prototype.setDatacols = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 dataRows = 8;
 * @return {number}
 */
proto.data.ReportOutput.prototype.getDatarows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.data.ReportOutput.prototype.setDatarows = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string headerName = 9;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getHeadername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setHeadername = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string footerName = 10;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getFootername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setFootername = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string printFormatUuid = 11;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getPrintformatuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setPrintformatuuid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string reportViewUuid = 12;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getReportviewuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setReportviewuuid = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string tableName = 13;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bytes outputStream = 14;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getOutputstream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes outputStream = 14;
 * This is a type-conversion wrapper around `getOutputstream()`
 * @return {string}
 */
proto.data.ReportOutput.prototype.getOutputstream_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutputstream()));
};


/**
 * optional bytes outputStream = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputstream()`
 * @return {!Uint8Array}
 */
proto.data.ReportOutput.prototype.getOutputstream_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutputstream()));
};


/** @param {!(string|Uint8Array)} value */
proto.data.ReportOutput.prototype.setOutputstream = function(value) {
  jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional string reportType = 15;
 * @return {string}
 */
proto.data.ReportOutput.prototype.getReporttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.data.ReportOutput.prototype.setReporttype = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


goog.object.extend(exports, proto.data);
