/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_base_data_type_pb = require('../proto/base_data_type_pb.js');
goog.object.extend(proto, proto_base_data_type_pb);
goog.exportSymbol('proto.data.BusinessPartner', null, global);
goog.exportSymbol('proto.data.Charge', null, global);
goog.exportSymbol('proto.data.ClientRequest', null, global);
goog.exportSymbol('proto.data.Country', null, global);
goog.exportSymbol('proto.data.Currency', null, global);
goog.exportSymbol('proto.data.DocumentType', null, global);
goog.exportSymbol('proto.data.GetCountryRequest', null, global);
goog.exportSymbol('proto.data.Language', null, global);
goog.exportSymbol('proto.data.ListLanguagesRequest', null, global);
goog.exportSymbol('proto.data.ListLanguagesResponse', null, global);
goog.exportSymbol('proto.data.ListOrganizationsRequest', null, global);
goog.exportSymbol('proto.data.ListOrganizationsResponse', null, global);
goog.exportSymbol('proto.data.ListWarehousesRequest', null, global);
goog.exportSymbol('proto.data.ListWarehousesResponse', null, global);
goog.exportSymbol('proto.data.Organization', null, global);
goog.exportSymbol('proto.data.Product', null, global);
goog.exportSymbol('proto.data.ProductPrice', null, global);
goog.exportSymbol('proto.data.SalesRepresentative', null, global);
goog.exportSymbol('proto.data.TaxRate', null, global);
goog.exportSymbol('proto.data.UnitOfMeasure', null, global);
goog.exportSymbol('proto.data.Warehouse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ClientRequest.displayName = 'proto.data.ClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.GetCountryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.GetCountryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.GetCountryRequest.displayName = 'proto.data.GetCountryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ListLanguagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ListLanguagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ListLanguagesRequest.displayName = 'proto.data.ListLanguagesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ListLanguagesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ListLanguagesResponse.repeatedFields_, null);
};
goog.inherits(proto.data.ListLanguagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ListLanguagesResponse.displayName = 'proto.data.ListLanguagesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Country = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Country, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Country.displayName = 'proto.data.Country';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Currency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Currency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Currency.displayName = 'proto.data.Currency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Organization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Organization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Organization.displayName = 'proto.data.Organization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ListOrganizationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ListOrganizationsResponse.repeatedFields_, null);
};
goog.inherits(proto.data.ListOrganizationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ListOrganizationsResponse.displayName = 'proto.data.ListOrganizationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ListOrganizationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ListOrganizationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ListOrganizationsRequest.displayName = 'proto.data.ListOrganizationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Warehouse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Warehouse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Warehouse.displayName = 'proto.data.Warehouse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ListWarehousesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ListWarehousesResponse.repeatedFields_, null);
};
goog.inherits(proto.data.ListWarehousesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ListWarehousesResponse.displayName = 'proto.data.ListWarehousesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ListWarehousesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ListWarehousesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ListWarehousesRequest.displayName = 'proto.data.ListWarehousesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.UnitOfMeasure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.UnitOfMeasure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.UnitOfMeasure.displayName = 'proto.data.UnitOfMeasure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Charge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Charge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Charge.displayName = 'proto.data.Charge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.BusinessPartner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.BusinessPartner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.BusinessPartner.displayName = 'proto.data.BusinessPartner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.DocumentType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.DocumentType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.DocumentType.displayName = 'proto.data.DocumentType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.SalesRepresentative = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.SalesRepresentative, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.SalesRepresentative.displayName = 'proto.data.SalesRepresentative';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Product.displayName = 'proto.data.Product';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.TaxRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.TaxRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.TaxRate.displayName = 'proto.data.TaxRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProductPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ProductPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProductPrice.displayName = 'proto.data.ProductPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Language.displayName = 'proto.data.Language';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    language: jspb.Message.getFieldWithDefault(msg, 2, ""),
    organizationuuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    warehouseuuid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ClientRequest}
 */
proto.data.ClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ClientRequest;
  return proto.data.ClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ClientRequest}
 */
proto.data.ClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionuuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationuuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarehouseuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrganizationuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWarehouseuuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string sessionUuid = 1;
 * @return {string}
 */
proto.data.ClientRequest.prototype.getSessionuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ClientRequest.prototype.setSessionuuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string language = 2;
 * @return {string}
 */
proto.data.ClientRequest.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ClientRequest.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string organizationUuid = 3;
 * @return {string}
 */
proto.data.ClientRequest.prototype.getOrganizationuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ClientRequest.prototype.setOrganizationuuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string warehouseUuid = 4;
 * @return {string}
 */
proto.data.ClientRequest.prototype.getWarehouseuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ClientRequest.prototype.setWarehouseuuid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.GetCountryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.GetCountryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.GetCountryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.GetCountryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countryid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.GetCountryRequest}
 */
proto.data.GetCountryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.GetCountryRequest;
  return proto.data.GetCountryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.GetCountryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.GetCountryRequest}
 */
proto.data.GetCountryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryuuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCountryid(value);
      break;
    case 3:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.GetCountryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.GetCountryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.GetCountryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.GetCountryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountryid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string countryUuid = 1;
 * @return {string}
 */
proto.data.GetCountryRequest.prototype.getCountryuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.GetCountryRequest.prototype.setCountryuuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 countryId = 2;
 * @return {number}
 */
proto.data.GetCountryRequest.prototype.getCountryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.GetCountryRequest.prototype.setCountryid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ClientRequest clientRequest = 3;
 * @return {?proto.data.ClientRequest}
 */
proto.data.GetCountryRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 3));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.GetCountryRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.GetCountryRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.GetCountryRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ListLanguagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ListLanguagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ListLanguagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListLanguagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ListLanguagesRequest}
 */
proto.data.ListLanguagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ListLanguagesRequest;
  return proto.data.ListLanguagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ListLanguagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ListLanguagesRequest}
 */
proto.data.ListLanguagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ListLanguagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ListLanguagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ListLanguagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListLanguagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ClientRequest clientRequest = 1;
 * @return {?proto.data.ClientRequest}
 */
proto.data.ListLanguagesRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 1));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.ListLanguagesRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ListLanguagesRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ListLanguagesRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.data.ListLanguagesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.ListLanguagesRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.data.ListLanguagesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ListLanguagesRequest.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ListLanguagesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ListLanguagesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ListLanguagesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ListLanguagesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListLanguagesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.data.Language.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ListLanguagesResponse}
 */
proto.data.ListLanguagesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ListLanguagesResponse;
  return proto.data.ListLanguagesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ListLanguagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ListLanguagesResponse}
 */
proto.data.ListLanguagesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordcount(value);
      break;
    case 2:
      var value = new proto.data.Language;
      reader.readMessage(value,proto.data.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ListLanguagesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ListLanguagesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ListLanguagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListLanguagesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.data.Language.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 recordCount = 1;
 * @return {number}
 */
proto.data.ListLanguagesResponse.prototype.getRecordcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ListLanguagesResponse.prototype.setRecordcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Language languages = 2;
 * @return {!Array<!proto.data.Language>}
 */
proto.data.ListLanguagesResponse.prototype.getLanguagesList = function() {
  return /** @type{!Array<!proto.data.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Language, 2));
};


/** @param {!Array<!proto.data.Language>} value */
proto.data.ListLanguagesResponse.prototype.setLanguagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.data.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Language}
 */
proto.data.ListLanguagesResponse.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.data.Language, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ListLanguagesResponse.prototype.clearLanguagesList = function() {
  this.setLanguagesList([]);
};


/**
 * optional string next_page_token = 3;
 * @return {string}
 */
proto.data.ListLanguagesResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ListLanguagesResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Country.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Country.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Country} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Country.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    countrycode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hasregion: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    regionname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    displaysequence: jspb.Message.getFieldWithDefault(msg, 8, ""),
    isaddresslinesreverse: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    capturesequence: jspb.Message.getFieldWithDefault(msg, 10, ""),
    displaysequencelocal: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isaddresslineslocalreverse: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    expressionpostal: jspb.Message.getFieldWithDefault(msg, 13, ""),
    haspostaladd: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    expressionphone: jspb.Message.getFieldWithDefault(msg, 15, ""),
    mediasize: jspb.Message.getFieldWithDefault(msg, 16, ""),
    expressionbankroutingno: jspb.Message.getFieldWithDefault(msg, 17, ""),
    expressionbankaccountno: jspb.Message.getFieldWithDefault(msg, 18, ""),
    language: jspb.Message.getFieldWithDefault(msg, 19, ""),
    allowcitiesoutoflist: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    ispostcodelookup: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    currency: (f = msg.getCurrency()) && proto.data.Currency.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Country}
 */
proto.data.Country.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Country;
  return proto.data.Country.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Country} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Country}
 */
proto.data.Country.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasregion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegionname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplaysequence(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaddresslinesreverse(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCapturesequence(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplaysequencelocal(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaddresslineslocalreverse(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpressionpostal(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaspostaladd(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpressionphone(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediasize(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpressionbankroutingno(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpressionbankaccountno(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowcitiesoutoflist(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspostcodelookup(value);
      break;
    case 22:
      var value = new proto.data.Currency;
      reader.readMessage(value,proto.data.Currency.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Country.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Country.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Country} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Country.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHasregion();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getRegionname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDisplaysequence();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIsaddresslinesreverse();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCapturesequence();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDisplaysequencelocal();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsaddresslineslocalreverse();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getExpressionpostal();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getHaspostaladd();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getExpressionphone();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMediasize();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getExpressionbankroutingno();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getExpressionbankaccountno();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getAllowcitiesoutoflist();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getIspostcodelookup();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.data.Currency.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.Country.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.Country.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Country.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string countryCode = 3;
 * @return {string}
 */
proto.data.Country.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setCountrycode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.data.Country.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.data.Country.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool hasRegion = 6;
 * @return {boolean}
 */
proto.data.Country.prototype.getHasregion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.data.Country.prototype.setHasregion = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string regionName = 7;
 * @return {string}
 */
proto.data.Country.prototype.getRegionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setRegionname = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string displaySequence = 8;
 * @return {string}
 */
proto.data.Country.prototype.getDisplaysequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setDisplaysequence = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool isAddressLinesReverse = 9;
 * @return {boolean}
 */
proto.data.Country.prototype.getIsaddresslinesreverse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.data.Country.prototype.setIsaddresslinesreverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string captureSequence = 10;
 * @return {string}
 */
proto.data.Country.prototype.getCapturesequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setCapturesequence = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string displaySequenceLocal = 11;
 * @return {string}
 */
proto.data.Country.prototype.getDisplaysequencelocal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setDisplaysequencelocal = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool isAddressLinesLocalReverse = 12;
 * @return {boolean}
 */
proto.data.Country.prototype.getIsaddresslineslocalreverse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.data.Country.prototype.setIsaddresslineslocalreverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string expressionPostal = 13;
 * @return {string}
 */
proto.data.Country.prototype.getExpressionpostal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setExpressionpostal = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool hasPostalAdd = 14;
 * @return {boolean}
 */
proto.data.Country.prototype.getHaspostaladd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.data.Country.prototype.setHaspostaladd = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string expressionPhone = 15;
 * @return {string}
 */
proto.data.Country.prototype.getExpressionphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setExpressionphone = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string mediaSize = 16;
 * @return {string}
 */
proto.data.Country.prototype.getMediasize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setMediasize = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string expressionBankRoutingNo = 17;
 * @return {string}
 */
proto.data.Country.prototype.getExpressionbankroutingno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setExpressionbankroutingno = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string expressionBankAccountNo = 18;
 * @return {string}
 */
proto.data.Country.prototype.getExpressionbankaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setExpressionbankaccountno = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string language = 19;
 * @return {string}
 */
proto.data.Country.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.data.Country.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional bool allowCitiesOutOfList = 20;
 * @return {boolean}
 */
proto.data.Country.prototype.getAllowcitiesoutoflist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.data.Country.prototype.setAllowcitiesoutoflist = function(value) {
  jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional bool isPostcodeLookup = 21;
 * @return {boolean}
 */
proto.data.Country.prototype.getIspostcodelookup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.data.Country.prototype.setIspostcodelookup = function(value) {
  jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional Currency currency = 22;
 * @return {?proto.data.Currency}
 */
proto.data.Country.prototype.getCurrency = function() {
  return /** @type{?proto.data.Currency} */ (
    jspb.Message.getWrapperField(this, proto.data.Currency, 22));
};


/** @param {?proto.data.Currency|undefined} value */
proto.data.Country.prototype.setCurrency = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Country.prototype.clearCurrency = function() {
  this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Country.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 22) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Currency.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Currency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Currency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Currency.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isocode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cursymbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    stdprecision: jspb.Message.getFieldWithDefault(msg, 6, 0),
    costingprecision: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Currency}
 */
proto.data.Currency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Currency;
  return proto.data.Currency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Currency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Currency}
 */
proto.data.Currency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsocode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStdprecision(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCostingprecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Currency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Currency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Currency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Currency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIsocode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCursymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStdprecision();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCostingprecision();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.Currency.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Currency.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.Currency.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Currency.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string iSOCode = 3;
 * @return {string}
 */
proto.data.Currency.prototype.getIsocode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Currency.prototype.setIsocode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string curSymbol = 4;
 * @return {string}
 */
proto.data.Currency.prototype.getCursymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Currency.prototype.setCursymbol = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.data.Currency.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.Currency.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 stdPrecision = 6;
 * @return {number}
 */
proto.data.Currency.prototype.getStdprecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.data.Currency.prototype.setStdprecision = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 costingPrecision = 7;
 * @return {number}
 */
proto.data.Currency.prototype.getCostingprecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.data.Currency.prototype.setCostingprecision = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Organization.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Organization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Organization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Organization.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isreadonly: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    duns: jspb.Message.getFieldWithDefault(msg, 6, ""),
    taxid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    phone2: jspb.Message.getFieldWithDefault(msg, 9, ""),
    fax: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Organization}
 */
proto.data.Organization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Organization;
  return proto.data.Organization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Organization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Organization}
 */
proto.data.Organization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreadonly(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuns(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone2(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Organization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Organization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Organization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Organization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsreadonly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDuns();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTaxid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPhone2();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFax();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.Organization.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.Organization.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Organization.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.data.Organization.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.data.Organization.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool isReadOnly = 5;
 * @return {boolean}
 */
proto.data.Organization.prototype.getIsreadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.data.Organization.prototype.setIsreadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string duns = 6;
 * @return {string}
 */
proto.data.Organization.prototype.getDuns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setDuns = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string taxId = 7;
 * @return {string}
 */
proto.data.Organization.prototype.getTaxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setTaxid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string phone = 8;
 * @return {string}
 */
proto.data.Organization.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setPhone = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string phone2 = 9;
 * @return {string}
 */
proto.data.Organization.prototype.getPhone2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setPhone2 = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string fax = 10;
 * @return {string}
 */
proto.data.Organization.prototype.getFax = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.data.Organization.prototype.setFax = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ListOrganizationsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ListOrganizationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ListOrganizationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ListOrganizationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListOrganizationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    organizationsList: jspb.Message.toObjectList(msg.getOrganizationsList(),
    proto.data.Organization.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ListOrganizationsResponse}
 */
proto.data.ListOrganizationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ListOrganizationsResponse;
  return proto.data.ListOrganizationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ListOrganizationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ListOrganizationsResponse}
 */
proto.data.ListOrganizationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordcount(value);
      break;
    case 2:
      var value = new proto.data.Organization;
      reader.readMessage(value,proto.data.Organization.deserializeBinaryFromReader);
      msg.addOrganizations(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ListOrganizationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ListOrganizationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ListOrganizationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListOrganizationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOrganizationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.data.Organization.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 recordCount = 1;
 * @return {number}
 */
proto.data.ListOrganizationsResponse.prototype.getRecordcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ListOrganizationsResponse.prototype.setRecordcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Organization organizations = 2;
 * @return {!Array<!proto.data.Organization>}
 */
proto.data.ListOrganizationsResponse.prototype.getOrganizationsList = function() {
  return /** @type{!Array<!proto.data.Organization>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Organization, 2));
};


/** @param {!Array<!proto.data.Organization>} value */
proto.data.ListOrganizationsResponse.prototype.setOrganizationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.data.Organization=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Organization}
 */
proto.data.ListOrganizationsResponse.prototype.addOrganizations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.data.Organization, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ListOrganizationsResponse.prototype.clearOrganizationsList = function() {
  this.setOrganizationsList([]);
};


/**
 * optional string next_page_token = 4;
 * @return {string}
 */
proto.data.ListOrganizationsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ListOrganizationsResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ListOrganizationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ListOrganizationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ListOrganizationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListOrganizationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleuuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ListOrganizationsRequest}
 */
proto.data.ListOrganizationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ListOrganizationsRequest;
  return proto.data.ListOrganizationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ListOrganizationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ListOrganizationsRequest}
 */
proto.data.ListOrganizationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoleuuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ListOrganizationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ListOrganizationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ListOrganizationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListOrganizationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoleuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional ClientRequest clientRequest = 1;
 * @return {?proto.data.ClientRequest}
 */
proto.data.ListOrganizationsRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 1));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.ListOrganizationsRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ListOrganizationsRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ListOrganizationsRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.data.ListOrganizationsRequest.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.ListOrganizationsRequest.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string roleUuid = 3;
 * @return {string}
 */
proto.data.ListOrganizationsRequest.prototype.getRoleuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ListOrganizationsRequest.prototype.setRoleuuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 page_size = 4;
 * @return {number}
 */
proto.data.ListOrganizationsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.data.ListOrganizationsRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string page_token = 5;
 * @return {string}
 */
proto.data.ListOrganizationsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ListOrganizationsRequest.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Warehouse.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Warehouse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Warehouse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Warehouse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Warehouse}
 */
proto.data.Warehouse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Warehouse;
  return proto.data.Warehouse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Warehouse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Warehouse}
 */
proto.data.Warehouse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Warehouse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Warehouse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Warehouse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Warehouse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.Warehouse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Warehouse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.Warehouse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Warehouse.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.data.Warehouse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Warehouse.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.data.Warehouse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Warehouse.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ListWarehousesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ListWarehousesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ListWarehousesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ListWarehousesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListWarehousesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    warehousesList: jspb.Message.toObjectList(msg.getWarehousesList(),
    proto.data.Warehouse.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ListWarehousesResponse}
 */
proto.data.ListWarehousesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ListWarehousesResponse;
  return proto.data.ListWarehousesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ListWarehousesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ListWarehousesResponse}
 */
proto.data.ListWarehousesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordcount(value);
      break;
    case 2:
      var value = new proto.data.Warehouse;
      reader.readMessage(value,proto.data.Warehouse.deserializeBinaryFromReader);
      msg.addWarehouses(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ListWarehousesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ListWarehousesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ListWarehousesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListWarehousesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWarehousesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.data.Warehouse.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 recordCount = 1;
 * @return {number}
 */
proto.data.ListWarehousesResponse.prototype.getRecordcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ListWarehousesResponse.prototype.setRecordcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Warehouse warehouses = 2;
 * @return {!Array<!proto.data.Warehouse>}
 */
proto.data.ListWarehousesResponse.prototype.getWarehousesList = function() {
  return /** @type{!Array<!proto.data.Warehouse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Warehouse, 2));
};


/** @param {!Array<!proto.data.Warehouse>} value */
proto.data.ListWarehousesResponse.prototype.setWarehousesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.data.Warehouse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Warehouse}
 */
proto.data.ListWarehousesResponse.prototype.addWarehouses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.data.Warehouse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ListWarehousesResponse.prototype.clearWarehousesList = function() {
  this.setWarehousesList([]);
};


/**
 * optional string next_page_token = 4;
 * @return {string}
 */
proto.data.ListWarehousesResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ListWarehousesResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ListWarehousesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ListWarehousesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ListWarehousesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListWarehousesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    organizationid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    organizationuuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ListWarehousesRequest}
 */
proto.data.ListWarehousesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ListWarehousesRequest;
  return proto.data.ListWarehousesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ListWarehousesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ListWarehousesRequest}
 */
proto.data.ListWarehousesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrganizationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationuuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ListWarehousesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ListWarehousesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ListWarehousesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ListWarehousesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOrganizationuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional ClientRequest clientRequest = 1;
 * @return {?proto.data.ClientRequest}
 */
proto.data.ListWarehousesRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 1));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.ListWarehousesRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ListWarehousesRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ListWarehousesRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 organizationId = 2;
 * @return {number}
 */
proto.data.ListWarehousesRequest.prototype.getOrganizationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.ListWarehousesRequest.prototype.setOrganizationid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string organizationUuid = 3;
 * @return {string}
 */
proto.data.ListWarehousesRequest.prototype.getOrganizationuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ListWarehousesRequest.prototype.setOrganizationuuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 page_size = 4;
 * @return {number}
 */
proto.data.ListWarehousesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.data.ListWarehousesRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string page_token = 5;
 * @return {string}
 */
proto.data.ListWarehousesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ListWarehousesRequest.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.UnitOfMeasure.prototype.toObject = function(opt_includeInstance) {
  return proto.data.UnitOfMeasure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.UnitOfMeasure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.UnitOfMeasure.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    stdprecision: jspb.Message.getFieldWithDefault(msg, 7, 0),
    costingprecision: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.UnitOfMeasure}
 */
proto.data.UnitOfMeasure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.UnitOfMeasure;
  return proto.data.UnitOfMeasure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.UnitOfMeasure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.UnitOfMeasure}
 */
proto.data.UnitOfMeasure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStdprecision(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCostingprecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.UnitOfMeasure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.UnitOfMeasure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.UnitOfMeasure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.UnitOfMeasure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStdprecision();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCostingprecision();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.UnitOfMeasure.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.UnitOfMeasure.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.UnitOfMeasure.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.UnitOfMeasure.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.data.UnitOfMeasure.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.UnitOfMeasure.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.data.UnitOfMeasure.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.UnitOfMeasure.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.data.UnitOfMeasure.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.UnitOfMeasure.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.data.UnitOfMeasure.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.UnitOfMeasure.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 stdPrecision = 7;
 * @return {number}
 */
proto.data.UnitOfMeasure.prototype.getStdprecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.data.UnitOfMeasure.prototype.setStdprecision = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 costingPrecision = 8;
 * @return {number}
 */
proto.data.UnitOfMeasure.prototype.getCostingprecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.data.UnitOfMeasure.prototype.setCostingprecision = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Charge.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Charge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Charge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Charge.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Charge}
 */
proto.data.Charge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Charge;
  return proto.data.Charge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Charge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Charge}
 */
proto.data.Charge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Charge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Charge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Charge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Charge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.Charge.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Charge.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.Charge.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Charge.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.data.Charge.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Charge.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.data.Charge.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Charge.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.BusinessPartner.prototype.toObject = function(opt_includeInstance) {
  return proto.data.BusinessPartner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.BusinessPartner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.BusinessPartner.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    taxid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    duns: jspb.Message.getFieldWithDefault(msg, 5, ""),
    naics: jspb.Message.getFieldWithDefault(msg, 6, ""),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    description: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.BusinessPartner}
 */
proto.data.BusinessPartner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.BusinessPartner;
  return proto.data.BusinessPartner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.BusinessPartner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.BusinessPartner}
 */
proto.data.BusinessPartner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuns(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNaics(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.BusinessPartner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.BusinessPartner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.BusinessPartner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.BusinessPartner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTaxid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDuns();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNaics();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.BusinessPartner.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.BusinessPartner.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string taxId = 4;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getTaxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setTaxid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string duns = 5;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getDuns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setDuns = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string naics = 6;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getNaics = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setNaics = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string lastName = 8;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setLastname = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.data.BusinessPartner.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.data.BusinessPartner.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.DocumentType.prototype.toObject = function(opt_includeInstance) {
  return proto.data.DocumentType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.DocumentType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DocumentType.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    printname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.DocumentType}
 */
proto.data.DocumentType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.DocumentType;
  return proto.data.DocumentType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.DocumentType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.DocumentType}
 */
proto.data.DocumentType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrintname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.DocumentType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.DocumentType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.DocumentType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.DocumentType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrintname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.DocumentType.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.DocumentType.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.DocumentType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.DocumentType.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.data.DocumentType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.DocumentType.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string printName = 4;
 * @return {string}
 */
proto.data.DocumentType.prototype.getPrintname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.DocumentType.prototype.setPrintname = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.data.DocumentType.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.DocumentType.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.SalesRepresentative.prototype.toObject = function(opt_includeInstance) {
  return proto.data.SalesRepresentative.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.SalesRepresentative} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.SalesRepresentative.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.SalesRepresentative}
 */
proto.data.SalesRepresentative.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.SalesRepresentative;
  return proto.data.SalesRepresentative.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.SalesRepresentative} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.SalesRepresentative}
 */
proto.data.SalesRepresentative.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.SalesRepresentative.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.SalesRepresentative.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.SalesRepresentative} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.SalesRepresentative.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.SalesRepresentative.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.SalesRepresentative.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.SalesRepresentative.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.SalesRepresentative.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.data.SalesRepresentative.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.SalesRepresentative.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.data.SalesRepresentative.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.SalesRepresentative.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    help: jspb.Message.getFieldWithDefault(msg, 5, ""),
    documentnote: jspb.Message.getFieldWithDefault(msg, 6, ""),
    uomname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    producttype: jspb.Message.getFieldWithDefault(msg, 8, ""),
    isstocked: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    isdropship: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    ispurchased: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    issold: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    imageurl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    productcategoryname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    productgroupname: jspb.Message.getFieldWithDefault(msg, 15, ""),
    productclassname: jspb.Message.getFieldWithDefault(msg, 16, ""),
    productclassificationname: jspb.Message.getFieldWithDefault(msg, 17, ""),
    weight: (f = msg.getWeight()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    volume: (f = msg.getVolume()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    upc: jspb.Message.getFieldWithDefault(msg, 20, ""),
    sku: jspb.Message.getFieldWithDefault(msg, 21, ""),
    shelfwidth: jspb.Message.getFieldWithDefault(msg, 22, 0),
    shelfheight: (f = msg.getShelfheight()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    shelfdepth: jspb.Message.getFieldWithDefault(msg, 24, 0),
    unitsperpack: jspb.Message.getFieldWithDefault(msg, 25, 0),
    unitsperpallet: (f = msg.getUnitsperpallet()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    guaranteedays: jspb.Message.getFieldWithDefault(msg, 27, 0),
    descriptionurl: jspb.Message.getFieldWithDefault(msg, 28, ""),
    versionno: jspb.Message.getFieldWithDefault(msg, 29, ""),
    taxcategory: jspb.Message.getFieldWithDefault(msg, 30, ""),
    description: jspb.Message.getFieldWithDefault(msg, 31, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Product}
 */
proto.data.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Product;
  return proto.data.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Product}
 */
proto.data.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHelp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentnote(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUomname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProducttype(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstocked(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdropship(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspurchased(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssold(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductcategoryname(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductgroupname(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductclassname(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductclassificationname(value);
      break;
    case 18:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setWeight(value);
      break;
    case 19:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setVolume(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpc(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setSku(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShelfwidth(value);
      break;
    case 23:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setShelfheight(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShelfdepth(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitsperpack(value);
      break;
    case 26:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setUnitsperpallet(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuaranteedays(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptionurl(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersionno(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxcategory(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHelp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDocumentnote();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUomname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProducttype();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIsstocked();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsdropship();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIspurchased();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIssold();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getProductcategoryname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getProductgroupname();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getProductclassname();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getProductclassificationname();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getWeight();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getVolume();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getUpc();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getSku();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getShelfwidth();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getShelfheight();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getShelfdepth();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getUnitsperpack();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getUnitsperpallet();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getGuaranteedays();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getDescriptionurl();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getVersionno();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getTaxcategory();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.Product.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.Product.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Product.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.data.Product.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.data.Product.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string help = 5;
 * @return {string}
 */
proto.data.Product.prototype.getHelp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setHelp = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string documentNote = 6;
 * @return {string}
 */
proto.data.Product.prototype.getDocumentnote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setDocumentnote = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string uomName = 7;
 * @return {string}
 */
proto.data.Product.prototype.getUomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setUomname = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string productType = 8;
 * @return {string}
 */
proto.data.Product.prototype.getProducttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setProducttype = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool isStocked = 9;
 * @return {boolean}
 */
proto.data.Product.prototype.getIsstocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.data.Product.prototype.setIsstocked = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isDropShip = 10;
 * @return {boolean}
 */
proto.data.Product.prototype.getIsdropship = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.data.Product.prototype.setIsdropship = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isPurchased = 11;
 * @return {boolean}
 */
proto.data.Product.prototype.getIspurchased = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.data.Product.prototype.setIspurchased = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool isSold = 12;
 * @return {boolean}
 */
proto.data.Product.prototype.getIssold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.data.Product.prototype.setIssold = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string imageURL = 13;
 * @return {string}
 */
proto.data.Product.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setImageurl = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string productCategoryName = 14;
 * @return {string}
 */
proto.data.Product.prototype.getProductcategoryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setProductcategoryname = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string productGroupName = 15;
 * @return {string}
 */
proto.data.Product.prototype.getProductgroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setProductgroupname = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string productClassName = 16;
 * @return {string}
 */
proto.data.Product.prototype.getProductclassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setProductclassname = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string productClassificationName = 17;
 * @return {string}
 */
proto.data.Product.prototype.getProductclassificationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setProductclassificationname = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional Decimal weight = 18;
 * @return {?proto.data.Decimal}
 */
proto.data.Product.prototype.getWeight = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 18));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.Product.prototype.setWeight = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Product.prototype.clearWeight = function() {
  this.setWeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Product.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Decimal volume = 19;
 * @return {?proto.data.Decimal}
 */
proto.data.Product.prototype.getVolume = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 19));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.Product.prototype.setVolume = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Product.prototype.clearVolume = function() {
  this.setVolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Product.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string upc = 20;
 * @return {string}
 */
proto.data.Product.prototype.getUpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setUpc = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string sku = 21;
 * @return {string}
 */
proto.data.Product.prototype.getSku = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setSku = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional int32 shelfWidth = 22;
 * @return {number}
 */
proto.data.Product.prototype.getShelfwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.data.Product.prototype.setShelfwidth = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional Decimal shelfHeight = 23;
 * @return {?proto.data.Decimal}
 */
proto.data.Product.prototype.getShelfheight = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 23));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.Product.prototype.setShelfheight = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Product.prototype.clearShelfheight = function() {
  this.setShelfheight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Product.prototype.hasShelfheight = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional int32 shelfDepth = 24;
 * @return {number}
 */
proto.data.Product.prototype.getShelfdepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.data.Product.prototype.setShelfdepth = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 unitsPerPack = 25;
 * @return {number}
 */
proto.data.Product.prototype.getUnitsperpack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.data.Product.prototype.setUnitsperpack = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional Decimal unitsPerPallet = 26;
 * @return {?proto.data.Decimal}
 */
proto.data.Product.prototype.getUnitsperpallet = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 26));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.Product.prototype.setUnitsperpallet = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Product.prototype.clearUnitsperpallet = function() {
  this.setUnitsperpallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Product.prototype.hasUnitsperpallet = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional int32 guaranteeDays = 27;
 * @return {number}
 */
proto.data.Product.prototype.getGuaranteedays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.data.Product.prototype.setGuaranteedays = function(value) {
  jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional string descriptionURL = 28;
 * @return {string}
 */
proto.data.Product.prototype.getDescriptionurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setDescriptionurl = function(value) {
  jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string versionNo = 29;
 * @return {string}
 */
proto.data.Product.prototype.getVersionno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setVersionno = function(value) {
  jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string taxCategory = 30;
 * @return {string}
 */
proto.data.Product.prototype.getTaxcategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setTaxcategory = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string description = 31;
 * @return {string}
 */
proto.data.Product.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.data.Product.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 31, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.TaxRate.prototype.toObject = function(opt_includeInstance) {
  return proto.data.TaxRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.TaxRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.TaxRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    taxindicator: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rate: (f = msg.getRate()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.TaxRate}
 */
proto.data.TaxRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.TaxRate;
  return proto.data.TaxRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.TaxRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.TaxRate}
 */
proto.data.TaxRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxindicator(value);
      break;
    case 6:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.TaxRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.TaxRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.TaxRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.TaxRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTaxindicator();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.TaxRate.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.TaxRate.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.data.TaxRate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.TaxRate.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.data.TaxRate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.TaxRate.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.data.TaxRate.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.TaxRate.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string taxIndicator = 5;
 * @return {string}
 */
proto.data.TaxRate.prototype.getTaxindicator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.TaxRate.prototype.setTaxindicator = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Decimal rate = 6;
 * @return {?proto.data.Decimal}
 */
proto.data.TaxRate.prototype.getRate = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 6));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.TaxRate.prototype.setRate = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.TaxRate.prototype.clearRate = function() {
  this.setRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.TaxRate.prototype.hasRate = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProductPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProductPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProductPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProductPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && proto.data.Product.toObject(includeInstance, f),
    pricelist: (f = msg.getPricelist()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    pricestd: (f = msg.getPricestd()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    pricelimit: (f = msg.getPricelimit()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    pricelistname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    istaxincluded: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    validfrom: jspb.Message.getFieldWithDefault(msg, 7, 0),
    currency: (f = msg.getCurrency()) && proto.data.Currency.toObject(includeInstance, f),
    taxrate: (f = msg.getTaxrate()) && proto.data.TaxRate.toObject(includeInstance, f),
    priceprecision: jspb.Message.getFieldWithDefault(msg, 10, 0),
    quantityonhand: (f = msg.getQuantityonhand()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    quantityreserved: (f = msg.getQuantityreserved()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    quantityordered: (f = msg.getQuantityordered()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f),
    quantityavailable: (f = msg.getQuantityavailable()) && proto_base_data_type_pb.Decimal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProductPrice}
 */
proto.data.ProductPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProductPrice;
  return proto.data.ProductPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProductPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProductPrice}
 */
proto.data.ProductPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.Product;
      reader.readMessage(value,proto.data.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setPricelist(value);
      break;
    case 3:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setPricestd(value);
      break;
    case 4:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setPricelimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPricelistname(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIstaxincluded(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidfrom(value);
      break;
    case 8:
      var value = new proto.data.Currency;
      reader.readMessage(value,proto.data.Currency.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 9:
      var value = new proto.data.TaxRate;
      reader.readMessage(value,proto.data.TaxRate.deserializeBinaryFromReader);
      msg.setTaxrate(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriceprecision(value);
      break;
    case 11:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setQuantityonhand(value);
      break;
    case 12:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setQuantityreserved(value);
      break;
    case 13:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setQuantityordered(value);
      break;
    case 14:
      var value = new proto_base_data_type_pb.Decimal;
      reader.readMessage(value,proto_base_data_type_pb.Decimal.deserializeBinaryFromReader);
      msg.setQuantityavailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProductPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProductPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProductPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProductPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.Product.serializeBinaryToWriter
    );
  }
  f = message.getPricelist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getPricestd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getPricelimit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getPricelistname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIstaxincluded();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getValidfrom();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.data.Currency.serializeBinaryToWriter
    );
  }
  f = message.getTaxrate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.data.TaxRate.serializeBinaryToWriter
    );
  }
  f = message.getPriceprecision();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getQuantityonhand();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getQuantityreserved();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getQuantityordered();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getQuantityavailable();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto_base_data_type_pb.Decimal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Product product = 1;
 * @return {?proto.data.Product}
 */
proto.data.ProductPrice.prototype.getProduct = function() {
  return /** @type{?proto.data.Product} */ (
    jspb.Message.getWrapperField(this, proto.data.Product, 1));
};


/** @param {?proto.data.Product|undefined} value */
proto.data.ProductPrice.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Decimal priceList = 2;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getPricelist = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 2));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setPricelist = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearPricelist = function() {
  this.setPricelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasPricelist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Decimal priceStd = 3;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getPricestd = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 3));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setPricestd = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearPricestd = function() {
  this.setPricestd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasPricestd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Decimal priceLimit = 4;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getPricelimit = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 4));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setPricelimit = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearPricelimit = function() {
  this.setPricelimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasPricelimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string priceListName = 5;
 * @return {string}
 */
proto.data.ProductPrice.prototype.getPricelistname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ProductPrice.prototype.setPricelistname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool isTaxIncluded = 6;
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.getIstaxincluded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.data.ProductPrice.prototype.setIstaxincluded = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 validFrom = 7;
 * @return {number}
 */
proto.data.ProductPrice.prototype.getValidfrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.data.ProductPrice.prototype.setValidfrom = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Currency currency = 8;
 * @return {?proto.data.Currency}
 */
proto.data.ProductPrice.prototype.getCurrency = function() {
  return /** @type{?proto.data.Currency} */ (
    jspb.Message.getWrapperField(this, proto.data.Currency, 8));
};


/** @param {?proto.data.Currency|undefined} value */
proto.data.ProductPrice.prototype.setCurrency = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearCurrency = function() {
  this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TaxRate taxRate = 9;
 * @return {?proto.data.TaxRate}
 */
proto.data.ProductPrice.prototype.getTaxrate = function() {
  return /** @type{?proto.data.TaxRate} */ (
    jspb.Message.getWrapperField(this, proto.data.TaxRate, 9));
};


/** @param {?proto.data.TaxRate|undefined} value */
proto.data.ProductPrice.prototype.setTaxrate = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearTaxrate = function() {
  this.setTaxrate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasTaxrate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 pricePrecision = 10;
 * @return {number}
 */
proto.data.ProductPrice.prototype.getPriceprecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.data.ProductPrice.prototype.setPriceprecision = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional Decimal quantityOnHand = 11;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getQuantityonhand = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 11));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setQuantityonhand = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearQuantityonhand = function() {
  this.setQuantityonhand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasQuantityonhand = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Decimal quantityReserved = 12;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getQuantityreserved = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 12));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setQuantityreserved = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearQuantityreserved = function() {
  this.setQuantityreserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasQuantityreserved = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Decimal quantityOrdered = 13;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getQuantityordered = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 13));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setQuantityordered = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearQuantityordered = function() {
  this.setQuantityordered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasQuantityordered = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Decimal quantityAvailable = 14;
 * @return {?proto.data.Decimal}
 */
proto.data.ProductPrice.prototype.getQuantityavailable = function() {
  return /** @type{?proto.data.Decimal} */ (
    jspb.Message.getWrapperField(this, proto_base_data_type_pb.Decimal, 14));
};


/** @param {?proto.data.Decimal|undefined} value */
proto.data.ProductPrice.prototype.setQuantityavailable = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProductPrice.prototype.clearQuantityavailable = function() {
  this.setQuantityavailable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProductPrice.prototype.hasQuantityavailable = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languagename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    languageiso: jspb.Message.getFieldWithDefault(msg, 3, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isbaselanguage: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    issystemlanguage: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isdecimalpoint: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    datepattern: jspb.Message.getFieldWithDefault(msg, 8, ""),
    timepattern: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Language}
 */
proto.data.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Language;
  return proto.data.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Language}
 */
proto.data.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageiso(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbaselanguage(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssystemlanguage(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdecimalpoint(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatepattern(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimepattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguagename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguageiso();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsbaselanguage();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIssystemlanguage();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsdecimalpoint();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDatepattern();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTimepattern();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.data.Language.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Language.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageName = 2;
 * @return {string}
 */
proto.data.Language.prototype.getLanguagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.Language.prototype.setLanguagename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string languageISO = 3;
 * @return {string}
 */
proto.data.Language.prototype.getLanguageiso = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Language.prototype.setLanguageiso = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string countryCode = 4;
 * @return {string}
 */
proto.data.Language.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Language.prototype.setCountrycode = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool isBaseLanguage = 5;
 * @return {boolean}
 */
proto.data.Language.prototype.getIsbaselanguage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.data.Language.prototype.setIsbaselanguage = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool isSystemLanguage = 6;
 * @return {boolean}
 */
proto.data.Language.prototype.getIssystemlanguage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.data.Language.prototype.setIssystemlanguage = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool isDecimalPoint = 7;
 * @return {boolean}
 */
proto.data.Language.prototype.getIsdecimalpoint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.data.Language.prototype.setIsdecimalpoint = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string datePattern = 8;
 * @return {string}
 */
proto.data.Language.prototype.getDatepattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.data.Language.prototype.setDatepattern = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string timePattern = 9;
 * @return {string}
 */
proto.data.Language.prototype.getTimepattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.data.Language.prototype.setTimepattern = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


goog.object.extend(exports, proto.data);
